# -*- coding: utf-8 -*-
"""khafidauliar/data-wrangling-sql-olist-ecommerce

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18dvQ7bC5f6eCFqEcJNp-T-T4z5RZFrK0

Objektif

1.  Total pendapatan penjualan berdasarkan bulan
2.  Analisis penjualan menurut negara bagian
3.  Identifikasi 10 produk terlaris berdasarkan jumlah order di Sao Paulo
4.  Identifikasi 10 produk berdasarkan jumlah total pendapatan di Sao Paulo
5.  Identifikasi 10 produk dengan rata-rata rating tertinggi di Sao Paulo
"""

# iomport library sesuai kebutuhan
import pandas as pd
import sqlite3
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# konek ke database olist
conn = sqlite3.connect('/content/drive/MyDrive/SQL Data Wrangling/olist.db')

# analisa tren penjualan
# query menghitung total pendapatan penjualan berdasarkan bulan:
query1 = """
SELECT
  strftime('%Y-%m', order_purchase_timestamp) AS month,
  SUM(payment_value) AS total_revenue
FROM
  olist_order_dataset
  JOIN olist_order_payments_dataset
    ON olist_order_dataset.order_id = olist_order_payments_dataset.order_id
GROUP BY
  month
ORDER BY
  month ASC
;"""

# convert SQL query ke DataFrame
df1 = pd.read_sql(query1, conn)
df1

# data cleaning
# memanggil 2 tabel yang digunakan dari query di atas
df_order = pd.read_sql_query("SELECT * FROM olist_order_dataset", conn)
df_payments = pd.read_sql_query("SELECT * FROM olist_order_payments_dataset", conn)

# cek missing values
print(df_order.isnull().sum())
print(df_payments.isnull().sum())

# menghapus missing values
df_order = df_order.dropna()
df_payments = df_payments.dropna()

# cek duplicates
print(df_order.duplicated().sum())
print(df_payments.duplicated().sum())

# menghapus duplicates
df_order = df_order.drop_duplicates(subset=['order_id'])
df_payments = df_payments.drop_duplicates(subset=['order_id'])

# cek relevansi data dan memastikan diantara 2 tabel terhubung
print(df_order['order_id'].nunique())
print(df_payments['order_id'].nunique())

# join 2 tabel dan menghitung total pendapatan
df = pd.merge(df_order, df_payments, on='order_id')
df['month'] = pd.to_datetime(df['order_purchase_timestamp']).dt.to_period('M')
df_revenue = df.groupby('month').agg({'payment_value': 'sum'}).reset_index()

# convert month column ke datetime type
df_revenue['month'] = df_revenue['month'].dt.to_timestamp()

# print data
print(df_revenue)

# check total order tiap bulan untuk memastikan apakah di data 2016-12 revenue sedikit karena jumlah ordernya juga sedikit 
query2 = """
SELECT
  strftime('%Y-%m', order_purchase_timestamp) AS month,
  COUNT(DISTINCT order_id) AS total_orders
FROM
  olist_order_dataset
GROUP BY
  month
ORDER BY
  month ASC
"""
df2 = pd.read_sql_query(query2, conn)

# print data
print(df2)

# visualisasi total pendapatan penjualan berdasarkan bulan dan tahun

# mengatur ukuran visualisasi
plt.figure(figsize=(10, 5))

# membuat plot
plt.plot(df_revenue['month'], df_revenue['payment_value'])

# menentukan axis labels and title
plt.xlabel('Month')
plt.ylabel('Total Revenue')
plt.title('Total Revenue by Month')

# menampilkan visualisasi
plt.show()

# analisis penjualan menurut negara bagian:
query3 = """
 SELECT
  olist_geolocation_dataset.geolocation_state,
  olist_geolocation_dataset.geolocation_city,
  COUNT(DISTINCT olist_order_dataset.customer_id) AS unique_customers,
  COUNT(olist_order_dataset.order_id) AS total_orders,
  SUM(olist_order_payments_dataset.payment_value) AS total_revenue
FROM
  olist_order_dataset
  JOIN olist_order_payments_dataset
    ON olist_order_dataset.order_id = olist_order_payments_dataset.order_id
  JOIN olist_order_customer_dataset
    ON olist_order_dataset.customer_id = olist_order_customer_dataset.customer_id
  JOIN olist_geolocation_dataset
    ON olist_order_customer_dataset.customer_zip_code_prefix = olist_geolocation_dataset.geolocation_zip_code_prefix
GROUP BY
  olist_geolocation_dataset.geolocation_state
ORDER BY
  total_revenue DESC
 ;"""

 # convert SQL query ke DataFrame
df3 = pd.read_sql(query3, conn)
df3

# cek missing values
print(df3.isnull().sum())

# cek duplicates
print(df3.duplicated().sum())

# cek type data masing-masing kolom
print(df3.dtypes)

# cek outliers
print(df3.describe())

# cek distribusi total revenue
num_cols = df3.select_dtypes(include='number').columns
for col in num_cols:
    sns.boxplot(x=df3[col])

# visualisasi untuk membandingkan total pendapatan dari masing masing negara bagian

# mengatur warna background dan ukuran visualisasi
sns.set_style('darkgrid')
plt.figure(figsize=(12, 6))

# membuat barplot
sns.barplot(data=df3, x='geolocation_state', y='total_revenue')

# menentukan axis labels and title
plt.xlabel('State')
plt.ylabel('Total Revenue')
plt.title('Total Revenue Generated by State')

# menampilkan visualisasi
plt.show()

# identifikasi 10 produk terlaris berdasarkan jumlah order di Sao Paulo
query4 = """
SELECT
  olist_products_dataset.product_category_name,
  SUM(olist_order_items_dataset.order_item_id) AS total_quantity_sold
FROM
  olist_order_items_dataset
  JOIN olist_products_dataset
    ON olist_order_items_dataset.product_id = olist_products_dataset.product_id
  JOIN olist_order_dataset
    ON olist_order_items_dataset.order_id = olist_order_dataset.order_id
  JOIN olist_order_customer_dataset
    ON olist_order_dataset.customer_id = olist_order_customer_dataset.customer_id
  JOIN olist_geolocation_dataset
    ON olist_order_customer_dataset.customer_zip_code_prefix = olist_geolocation_dataset.geolocation_zip_code_prefix
WHERE
  olist_geolocation_dataset.geolocation_state = 'SP'
GROUP BY
  olist_products_dataset.product_category_name
ORDER BY
  total_quantity_sold DESC
LIMIT
  10
;"""

# convert SQL query ke DataFrame
df4 = pd.read_sql(query4, conn)
df4

# cek missing values
print(df4.isnull().sum())

# cek duplicates
print(df4.duplicated().sum())

# cek type data masing-masing kolom
print(df4.dtypes)

# cek outliers
print(df4.describe())

# visualisasi untuk melihat 10 produk terlaris berdasarkan jumlah order di Sao Paulo

# mengatur warna background dan ukuran visualisasi
sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))

# membuat barplot
sns.barplot(x="total_quantity_sold", y="product_category_name", data=df4)

# menentukan axis labels and title
plt.title("Top-selling products by quantity in São Paulo")
plt.xlabel("Total quantity sold")
plt.ylabel("Product category")

# menampilkan visualisasi
plt.show()

# identifikasi 10 produk berdasarkan jumlah total pendapatan di Sao Paulo
query5 = """
SELECT
  olist_products_dataset.product_category_name,
  SUM(olist_order_items_dataset.price) AS total_revenue
FROM
  olist_order_items_dataset
  JOIN olist_products_dataset
    ON olist_order_items_dataset.product_id = olist_products_dataset.product_id
  JOIN olist_order_dataset
    ON olist_order_items_dataset.order_id = olist_order_dataset.order_id
  JOIN olist_order_customer_dataset
    ON olist_order_dataset.customer_id = olist_order_customer_dataset.customer_id
  JOIN olist_geolocation_dataset
    ON olist_order_customer_dataset.customer_zip_code_prefix = olist_geolocation_dataset.geolocation_zip_code_prefix
WHERE
  olist_geolocation_dataset.geolocation_state = 'SP'
GROUP BY
  olist_products_dataset.product_category_name
ORDER BY
  total_revenue DESC
LIMIT
  10
;"""

# convert SQL query ke DataFrame
df5 = pd.read_sql(query5, conn)
df5

# cek missing values
print(df5.isnull().sum())

# cek duplicates
print(df5.duplicated().sum())

# cek type data masing-masing kolom
print(df5.dtypes)

# cek outliers
print(df5.describe())

# visualisasi untuk melihat 10 produk berdasarkan jumlah total pendapatan di Sao Paulo

# mengatur ukuran visualisasi
plt.figure(figsize=(10, 6))

# membuat barchart dan mengubah posisi x-axis labels 45 derajat ke arah kanan
plt.bar(df5['product_category_name'], df5['total_revenue'] / 1e6)
plt.xticks(rotation=45, ha='right')

# menentukan axis labels and title
plt.xlabel('Product Category')
plt.ylabel('Total Revenue (million BRL)')
plt.title('Top 10 Product Categories by Revenue in São Paulo')

# menampilkan visualisasi
plt.show()

# lihat list table
invoice = pd.read_sql("SELECT name FROM sqlite_master WHERE type='table';", conn)
invoice

# identifikasi 10 produk dengan rata-rata rating tertinggi di Sao Paulo
query6 = """
SELECT
  olist_products_dataset.product_category_name,
  AVG(olist_order_reviews_dataset.review_score) AS average_rating
FROM
  olist_order_items_dataset
  JOIN olist_products_dataset
    ON olist_order_items_dataset.product_id = olist_products_dataset.product_id
  JOIN olist_order_reviews_dataset
    ON olist_order_items_dataset.order_id = olist_order_reviews_dataset.order_id
  JOIN olist_order_dataset
    ON olist_order_items_dataset.order_id = olist_order_dataset.order_id
  JOIN olist_order_customer_dataset
    ON olist_order_dataset.customer_id = olist_order_customer_dataset.customer_id
  JOIN olist_geolocation_dataset
    ON olist_order_customer_dataset.customer_zip_code_prefix = olist_geolocation_dataset.geolocation_zip_code_prefix
WHERE
  olist_geolocation_dataset.geolocation_state = 'SP'
GROUP BY
  olist_products_dataset.product_category_name
HAVING
  COUNT(DISTINCT olist_order_reviews_dataset.order_id) >= 10 -- Only consider products with at least 10 reviews
ORDER BY
  average_rating DESC
LIMIT
  10
;"""

# convert SQL query ke DataFrame
df6 = pd.read_sql(query6, conn)
df6

# cek missing values
print(df6.isnull().sum())

# cek duplicates
print(df6.duplicated().sum())

# cek outliers
print(df6.describe())

# hitung jumlah kemunculan setiap nama kategori produk
category_counts = df6['product_category_name'].value_counts()
print(category_counts)

# memastikan rating rangenya 1 sampai dengan 5
ratings = df6['average_rating']
if np.all((ratings >= 1) & (ratings <= 5)):
    print("All ratings are within the range of 1 to 5")
else:
    print("There are ratings outside the range of 1 to 5")

# cek distribusi data
num_cols = df6.select_dtypes(include='number').columns
for col in num_cols:
    sns.boxplot(x=df6[col])

# visualisasi untuk melihat 10 produk dengan rata-rata rating tertinggi di Sao Paulo

# mengatur ukuran visualisasi
plt.figure(figsize=(10, 5))

# membuat barchart dan mengubah posisi x-axis labels 45 derajat ke arah kanan
plt.bar(df6['product_category_name'], df6['average_rating'])
plt.xticks(rotation=45, ha='right')

# menentukan axis labels and title
plt.title('Average rating by product category in São Paulo')
plt.xlabel('Product category')
plt.ylabel('Average rating')

# menampilkan visualisasi
plt.show()